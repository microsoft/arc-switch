name: Build Unified Switch Parsers

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Mark as pre-release'
        required: true
        default: false
        type: boolean

env:
  MAJOR_VERSION: 1

permissions:
  contents: write

jobs:
  generate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate build number
      id: version
      run: |
        # Get current YYMM
        YYMM=$(date +"%y%m")
        echo "Current YYMM: ${YYMM}"
        
        # Get all tags that match the pattern Major.YYMM.*
        PATTERN="${MAJOR_VERSION}.${YYMM}."
        echo "Searching for tags matching: ${PATTERN}*"
        
        # Find the highest increment number for this YYMM
        LAST_INCREMENT=$(git tag -l "${PATTERN}*" | \
          sed "s/${PATTERN//./\\.}//" | \
          grep -E '^[0-9]+$' | \
          sort -n | \
          tail -1)
        
        # If no previous tag found for this YYMM, start at 1
        if [ -z "$LAST_INCREMENT" ]; then
          INCREMENT=1
        else
          INCREMENT=$((LAST_INCREMENT + 1))
        fi
        
        VERSION="${MAJOR_VERSION}.${YYMM}.${INCREMENT}"
        echo "Generated version: ${VERSION}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

  build-parsers:
    needs: generate-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parser:
          - name: cisco-parser
            path: src/SwitchOutput/Cisco/Nexus/10/cisco-parser
            vendor: cisco-nexus
            description: "Unified Cisco Nexus Switch Parser"
          - name: dell-parser
            path: src/SwitchOutput/DellOS/10/dell-parser
            vendor: dell-os10
            description: "Unified Dell OS10 Switch Parser"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build ${{ matrix.parser.name }}
      run: |
        cd ${{ matrix.parser.path }}
        
        echo "========================================="
        echo "Building: ${{ matrix.parser.name }}"
        echo "Vendor: ${{ matrix.parser.vendor }}"
        echo "Description: ${{ matrix.parser.description }}"
        echo "Version: ${{ needs.generate-version.outputs.version }}"
        echo "========================================="
        
        # Initialize go module if needed
        if [ ! -f "go.mod" ]; then
          go mod init ${{ matrix.parser.name }}
        fi
        go mod tidy
        
        # Build
        mkdir -p build
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
          -ldflags="-w -s -X main.version=${{ needs.generate-version.outputs.version }}" \
          -o build/${{ matrix.parser.name }} cmd/main.go
        
        # Create package
        mkdir -p dist
        cp build/${{ matrix.parser.name }} dist/
        
        # Copy sample files from parent directory
        if [ "${{ matrix.parser.vendor }}" = "cisco-nexus" ]; then
          cp ../show-*.txt dist/ 2>/dev/null || true
          cp ../commands.json dist/ 2>/dev/null || true
        fi
        
        # Create README
        echo "# ${{ matrix.parser.description }}" > dist/README.md
        echo "Version: ${{ needs.generate-version.outputs.version }}" >> dist/README.md
        echo "" >> dist/README.md
        echo "## Usage" >> dist/README.md
        echo '```bash' >> dist/README.md
        echo "./${{ matrix.parser.name }} -list" >> dist/README.md
        echo "./${{ matrix.parser.name }} -p <parser-type> -i <input-file> -o <output-file>" >> dist/README.md
        echo '```' >> dist/README.md
        echo "" >> dist/README.md
        echo "## Available Parsers" >> dist/README.md
        echo "Run \`./${{ matrix.parser.name }} -list\` to see all available parsers." >> dist/README.md
        
        # Create tarball
        cd dist
        tar -czf ../${{ matrix.parser.vendor }}-unified-parser-${{ needs.generate-version.outputs.version }}-linux-amd64.tar.gz *
        cd ..
        
        echo "Package created successfully!"
        ls -lh *.tar.gz
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.parser.vendor }}-parser
        path: "${{ matrix.parser.path }}/*.tar.gz"

  create-release:
    needs: [generate-version, build-parsers]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -type f -exec mv {} release-assets/ \;
        
        echo "Release assets:"
        ls -la release-assets/
        
    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ needs.generate-version.outputs.version }}" -m "Release ${{ needs.generate-version.outputs.version }}"
        git push origin "${{ needs.generate-version.outputs.version }}"
        
    - name: Generate release notes
      run: |
        echo "# Unified Switch Parsers - ${{ needs.generate-version.outputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "## ðŸŽ¯ What's New" >> release_notes.md
        echo "" >> release_notes.md
        echo "Unified parser architecture with single binaries per vendor for easier deployment and maintenance." >> release_notes.md
        echo "" >> release_notes.md
        echo "## ðŸ“¦ Available Packages" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Cisco Nexus Unified Parser" >> release_notes.md
        echo "- **File**: \`cisco-nexus-unified-parser-${{ needs.generate-version.outputs.version }}-linux-amd64.tar.gz\`" >> release_notes.md
        echo "- **Parsers**: bgp-all-summary, class-map, environment-power, interface-counters, interface-error-counters, inventory, ip-arp, ip-route, lldp-neighbor, mac-address, system-uptime, transceiver" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Dell OS10 Unified Parser" >> release_notes.md
        echo "- **File**: \`dell-os10-unified-parser-${{ needs.generate-version.outputs.version }}-linux-amd64.tar.gz\`" >> release_notes.md
        echo "- **Parsers**: interface, interface-phy, lldp, version" >> release_notes.md
        echo "" >> release_notes.md
        echo "## ðŸš€ Usage" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "# Extract and use" >> release_notes.md
        echo "tar -xzf cisco-nexus-unified-parser-${{ needs.generate-version.outputs.version }}-linux-amd64.tar.gz" >> release_notes.md
        echo "./cisco-parser -list" >> release_notes.md
        echo "./cisco-parser -p class-map -i show-class-map.txt -o output.json" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "## ðŸ“‹ Benefits" >> release_notes.md
        echo "- Single binary per vendor (reduced deployment complexity)" >> release_notes.md
        echo "- Consistent command-line interface" >> release_notes.md
        echo "- Smaller total package size" >> release_notes.md
        echo "- Easier updates and maintenance" >> release_notes.md
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.generate-version.outputs.version }}
        name: Release ${{ needs.generate-version.outputs.version }}
        body_path: release_notes.md
        prerelease: ${{ github.event.inputs.prerelease }}
        files: release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}