name: Create Pre-Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Pre-release version (e.g., v0.0.3-alpha.1)'
        required: true
        default: 'v0.0.3-alpha.1'
      prerelease:
        description: 'Mark as pre-release'
        required: true
        default: true
        type: boolean
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  create-prerelease:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Discover and build all Go programs
      run: |
        # Create release directory in the workspace root
        mkdir -p $GITHUB_WORKSPACE/release-assets
        
        # Find all main Go programs under src/SwitchOutput (excluding test files)
        echo "üîç Discovering Go main programs..."
        PROGRAMS=$(find src/SwitchOutput -name "*.go" -not -name "*_test.go" -type f -exec grep -l "package main" {} \; | sort)
        
        echo "üì¶ Found Go main programs:"
        for program in $PROGRAMS; do
          echo "  - $program"
        done
        
        # Build each program
        for program_file in $PROGRAMS; do
          program_dir=$(dirname "$program_file")
          program_name=$(basename "$program_file" .go)
          
          echo "üî® Building $program_name from $program_dir..."
          
          cd "$GITHUB_WORKSPACE/$program_dir"
          
          # Initialize go module if it doesn't exist
          if [ ! -f "go.mod" ]; then
            echo "  Initializing go module..."
            go mod init "$program_name"
          fi
          
          # Tidy dependencies
          go mod tidy
          
          # Build the binary
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o "$program_name" "$program_name.go"
          chmod +x "$program_name"
          
          echo "  ‚úÖ Built $program_name successfully"
          cd "$GITHUB_WORKSPACE"
        done
        
    - name: Package binaries and assets
      run: |
        # Find all built binaries and package them with their assets
        echo "üì¶ Packaging binaries and assets..."
        
        PROGRAMS=$(find src/SwitchOutput -name "*.go" -not -name "*_test.go" -type f -exec grep -l "package main" {} \; | sort)
        
        for program_file in $PROGRAMS; do
          program_dir=$(dirname "$program_file")
          program_name=$(basename "$program_file" .go)
          
          echo "üì¶ Packaging $program_name..."
          
          cd "$GITHUB_WORKSPACE/$program_dir"
          
          # Determine what files to include in the package
          PACKAGE_FILES="$program_name"
          
          # Always include README if it exists
          if [ -f "README.md" ]; then
            PACKAGE_FILES="$PACKAGE_FILES README.md"
          fi
          
          # Include specific files based on the program
          case "$program_name" in
            "mac_address_parser")
              if [ -f "mac-address-table-sample.json" ]; then
                PACKAGE_FILES="$PACKAGE_FILES mac-address-table-sample.json"
              fi
              ;;
            "interface_counters_parser")
              if [ -f "interface-counters-sample.json" ]; then
                PACKAGE_FILES="$PACKAGE_FILES interface-counters-sample.json"
              fi
              ;;
            "show_interface_phy_eth")
              if [ -f "show_interface_phy-eth.json" ]; then
                PACKAGE_FILES="$PACKAGE_FILES show_interface_phy-eth.json"
              fi
              if [ -f "show_interface_phy-eth.txt" ]; then
                PACKAGE_FILES="$PACKAGE_FILES show_interface_phy-eth.txt"
              fi
              ;;
            "lldp_syslog")
              if [ -f "example-lldp-data.json" ]; then
                PACKAGE_FILES="$PACKAGE_FILES example-lldp-data.json"
              fi
              if [ -f "lldp-kql-query.kql" ]; then
                PACKAGE_FILES="$PACKAGE_FILES lldp-kql-query.kql"
              fi
              if [ -f "show-lldp-neighbors-detail.txt" ]; then
                PACKAGE_FILES="$PACKAGE_FILES show-lldp-neighbors-detail.txt"
              fi
              ;;
            "show_version")
              if [ -f "show_version.json" ]; then
                PACKAGE_FILES="$PACKAGE_FILES show_version.json"
              fi
              if [ -f "show_version.txt" ]; then
                PACKAGE_FILES="$PACKAGE_FILES show_version.txt"
              fi
              ;;
            "show_interface")
              if [ -f "example_show_interface.json" ]; then
                PACKAGE_FILES="$PACKAGE_FILES example_show_interface.json"
              fi
              if [ -f "example_show_interface.txt" ]; then
                PACKAGE_FILES="$PACKAGE_FILES example_show_interface.txt"
              fi
              if [ -f "example_interface.kql" ]; then
                PACKAGE_FILES="$PACKAGE_FILES example_interface.kql"
              fi
              ;;
          esac
          
          # Create the tar archive
          echo "  Creating archive with files: $PACKAGE_FILES"
          tar -czf "$GITHUB_WORKSPACE/release-assets/${program_name}-${{ github.event.inputs.version }}-linux-amd64.tar.gz" $PACKAGE_FILES
          
          echo "  ‚úÖ Packaged $program_name successfully"
          cd "$GITHUB_WORKSPACE"
        done
          
    - name: Generate checksums
      run: |
        cd release-assets
        echo "üîê Generating checksums..."
        for archive in *.tar.gz; do
          echo "  Generating checksum for $archive"
          sha256sum "$archive" > "${archive}.sha256"
        done
        echo "‚úÖ All checksums generated"
        
    - name: Get previous tag
      id: prev_tag
      run: |
        PREV_TAG=$(git tag --sort=-version:refname | head -n1)
        echo "prev_tag=${PREV_TAG}" >> $GITHUB_OUTPUT
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ github.event.inputs.version }}"
        PREV_TAG="${{ steps.prev_tag.outputs.prev_tag }}"
        CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
        
        if [ -n "$CUSTOM_NOTES" ]; then
          NOTES="$CUSTOM_NOTES"
        else
          NOTES="# Release Notes - ${VERSION}

        ## üöÄ Pre-Release: Network Switch Output Tools

        This pre-release includes network switch output processing tools for various vendors and platforms.

        ### ‚ú® What's Included

        #### Cisco Nexus Tools
        - **mac_address_parser** - Parse MAC address tables from Cisco Nexus switches
        - **interface_counters_parser** - Parse interface counter statistics and metrics

        #### Dell OS10 Tools
        - **show_interface_phy_eth** - Parse physical Ethernet interface information
        - **lldp_syslog** - Process LLDP neighbor data for syslog output
        - **show_version** - Parse system version information
        - **show_interface** - Parse interface configuration and status

        ### üîß Technical Features

        - **Cross-Platform Binaries**: Pre-compiled Linux AMD64 binaries for all tools
        - **JSON Output**: Structured JSON output for easy integration with monitoring systems
        - **Command-Line Interface**: Flexible CLI options for various input methods
        - **Sample Data**: Example files and templates included with each tool

        ### üì¶ Package Contents

        Each tool package includes:
        - Pre-compiled Linux AMD64 binary
        - README.md with documentation and usage instructions
        - Sample input/output files and templates
        - KQL query examples (where applicable)

        ### üîó Basic Usage

        \`\`\`bash
        # Extract any tool archive
        tar -xzf <tool-name>-${VERSION}-linux-amd64.tar.gz
        cd <tool-directory>

        # Run with input file (example with mac_address_parser)
        ./mac_address_parser -input show-mac-address-table.txt -output output.json

        # Run with commands file
        ./mac_address_parser -commands commands.json -output output.json
        \`\`\`

        ### ‚ö†Ô∏è Pre-Release Notice

        This is a pre-release version intended for testing. Please report any issues or feedback.

        ---

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${VERSION}"
        fi
        
        # Save to file for the release
        echo "$NOTES" > release-notes.md
        
        # Also output for use in the release step
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
        git push origin "${{ github.event.inputs.version }}"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        prerelease: ${{ github.event.inputs.prerelease }}
        files: release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload release notes as artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release-notes.md
        
    - name: Print release info
      run: |
        echo "‚úÖ Pre-release created successfully!"
        echo "üè∑Ô∏è Tag: ${{ github.event.inputs.version }}"
        echo "üì¶ Assets created:"
        ls -la release-assets/
        echo ""
        echo "üìä Asset summary:"
        echo "  Binaries: $(ls release-assets/*.tar.gz | wc -l)"
        echo "  Checksums: $(ls release-assets/*.sha256 | wc -l)"
        echo ""
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }}"